<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// check for button

cmd = hobbl_com_check_command(1); // Check for event on slot 1

if(cmd == injectBtn)
{
    dll = hobbl_com_edit_getline(pathText, 0)
    index = hobbl_com_listbox_getsel(wndList);
    show_debug_message("Index"+string(index));
    wnd = dsWndList[|index]
    
    // Catch trolls
    if(dll == "" or wnd == undefined)
    {
        hobbl_com_dialog_messagebox(hwnd_main, "Please specify the DLL and the window", "Error", api_mb_ok | api_mb_iconexclamation)
        exit;
    }
    
    // Inject   
    show_debug_message(dll)
    show_debug_message(wnd)
    
    
    var result = inj_try_injection(dll, wnd);
    
    switch(round(result)) // Check result
    {
        case 0: // failed mem alloc
        hobbl_com_dialog_messagebox(hwnd_main, "Failed to allocate process memory.", "Failure", api_mb_ok | api_mb_iconerror)
        break;
        
        case 1: // Everything OK
        hobbl_com_dialog_messagebox(hwnd_main, "Successfully injected.", "Success", api_mb_ok | api_mb_iconinformation)
        break;
        
        case 2: // Timeout
        hobbl_com_dialog_messagebox(hwnd_main, "Injection timed out. Process not found.", "Timeout", api_mb_ok | api_mb_iconexclamation)
        break;
    }
}

if(cmd == pathBtnDlg)
{

    show_debug_message("open dlg")
    
    hobbl_com_filedialog_prepare("DLL files (*.dll)|*.dll","","c:\",".dll"); // Prepares settings
    
    dllfile = hobbl_com_filedialog_openfile(0,0,"Open DLL file", hwnd_main)
    hobbl_com_edit_setsel(pathText, 0, string_length(hobbl_com_edit_getline(pathText, 0)))
    hobbl_com_edit_replaceselection(pathText, 0, dllfile)
    // Add \\s
    var old = hobbl_com_edit_getline(pathText, 0);
    var new = string_replace_all(old, "\", "\\")
    
    hobbl_com_edit_setsel(pathText, 0, string_length(hobbl_com_edit_getline(pathText, 0)))
    hobbl_com_edit_replaceselection(pathText, 0, new)
    
    
    canRefresh = true;
    hobbl_com_control_enable(textBtnDlg, canRefresh)
}


if(cmd == textBtnDlg)
{
    ds_list_destroy(dsWndList) // clear the dslist
    dsWndList = ds_list_create();
    hobbl_com_listbox_resetcontent(wndList);
    
    canRefresh = false; // set blocked
    hobbl_com_control_enable(textBtnDlg, canRefresh) // disable btn

    
    // enumerate wnds
    hobbl_com_find_enumwindows();
    cnt = hobbl_com_find_getnumfound();
    cur = 0;
    while(cur &lt; cnt)
    {
        curhwnd = hobbl_com_find_getfoundhandle(cur);
        var text = hobbl_com_window_gettext(curhwnd);
        var class = string(hobbl_com_window_getclassname(curhwnd));
        var par = hobbl_com_window_getparent(curhwnd); 
        if(true &amp;&amp; text != "")
        {
            show_debug_message( text + "-" + class + "-" + string(par));
            hobbl_com_listbox_addstring(wndList, text)
            ds_list_add(dsWndList, text);
        }
        cur ++;      
    }
    show_debug_message("done!")
}

// git btn
if(cmd == gitBtn)
{
    url_open("https://github.com/sam-k0/x86-Injector");
}
// abt btn
if(cmd == abtBtn)
{
    var txt = "x86 Injector made in C++ / GM:S
    Credits go to:
    - Hobbl (Max Win Api 2 extension)
    - Random people on StackOverflow
    
    This project is on GitHub!
    
    Usage:
    1. Select DLL
    2. Press on (...) next to the empty window list
    3. Select a window
    4. Press Inject
    "
    hobbl_com_dialog_showabout(hwnd_main, "About", txt, bm_injector)
}






</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// End the game if window is closed
if(!hobbl_com_window_exists(hwnd_main))game_end()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(dsWndList)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Window handles
hwnd_GM = int64(window_handle());
hwnd_main = hobbl_com_window_create(0, window_get_x(), window_get_y(), 500, 200, api_ws_visible | api_ws_caption | api_ws_sysmenu, api_ws_ex_topmost);

ico_main = hobbl_com_resource_loadicon("main.ico")
hobbl_com_window_seticon(hwnd_main, ico_main)

ico_syringe =  hobbl_com_resource_loadicon("syringe.ico")

bm_injector = hobbl_com_resource_loadbitmap("icon.bmp")

hobbl_com_window_settext(hwnd_main, "DLL Injector")
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// create controls
stb_cont = hobbl_com_status_create(hwnd_main, api_ccs_top,0);
hobbl_com_status_settext(stb_cont, 0, "C++ DLL Injector - " + string(GM_version) + " Runtime ver. " + string(GM_runtime_version));

// DLL path label
labelY = 32; 
pathLabel = hobbl_com_edit_create(hwnd_main, 5, labelY, 80, 20, api_es_left | api_es_readonly, 0);
hobbl_com_edit_setsel(pathLabel, 0,0);
hobbl_com_edit_replaceselection(pathLabel, 0, "DLL File Path:");

pathText = hobbl_com_edit_create(hwnd_main, 100, labelY, 350, 20, api_es_left | api_es_autohscroll, 0);

pathBtnDlg = hobbl_com_button_create(hwnd_main, 430+32, labelY, 20, 20, 0, 0); // File dlg
hobbl_com_control_settext(pathBtnDlg, "...");

// Window Title stuff
labelY = 64; 
wndLabel = hobbl_com_edit_create(hwnd_main, 5, labelY, 90, 20, api_es_left | api_es_readonly, 0);
hobbl_com_edit_setsel(wndLabel, 0,0);
hobbl_com_edit_replaceselection(wndLabel, 0, "Window Title:");
/*
wndText = hobbl_com_edit_create(hwnd_main, 100, labelY, 350, 20, api_es_left, 0);
*/

wndList = hobbl_com_listbox_create(hwnd_main, 100, labelY, 350, 100, api_lbs_hasstrings | api_ws_vscroll | api_lbs_nointegralheight ,0);


textBtnDlg = hobbl_com_button_create(hwnd_main, 430+32, labelY, 20, 20, 0, 0); // File dlg
hobbl_com_control_settext(textBtnDlg, "...");

// Button
injectBtn = hobbl_com_button_create(hwnd_main, 5, 100, 80, 20, 0,0)
hobbl_com_control_settext(injectBtn, "Inject")
hobbl_com_button_setimage(injectBtn, 1, ico_syringe)

hobbl_com_check_set(1, hwnd_main)

// GitHub button
gitBtn = hobbl_com_button_create(hwnd_main,  5, 100+32, 80, 20, 0,0)
hobbl_com_control_settext(gitBtn, "GitHub Source")

// About button
abtBtn = hobbl_com_button_create(hwnd_main, 430+32, 140, 20, 20, 0, 0)
hobbl_com_control_settext(abtBtn, "?")
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// set gmwindow invis // vars

hobbl_com_window_show(hwnd_GM, api_sw_hide);

dsWndList = ds_list_create();
canRefresh = false;


hobbl_com_control_enable(textBtnDlg, 0)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
